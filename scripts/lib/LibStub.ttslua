--[[--
LibStub
LibStub is a simple versioning stub meant for use in Libraries.
http://www.wowace.com/wiki/LibStub for more info.
LibStub is hereby placed in the Public Domain Credits: Kaelten, Cladhaire, ckknight, Mikk, Ammo, Nevcairiel, joshborke
@module LibStub
@revision 3
@license Unlicense
--]]

local LIBSTUB_MAJOR, LIBSTUB_MINOR = "LibStub", 3
local LibStub = _G[LIBSTUB_MAJOR]

if (LibStub and (LibStub.minor >= LIBSTUB_MINOR)) then
  return LibStub
end

local setmetatable = _G.setmetatable
local assert, error = _G.assert, _G.error
local type, tostring = _G.type, _G.tostring
local strmatch = _G.string.match
local table = _G.table

LibStub = {libs = {}, minors = {}}
LibStub.major = LIBSTUB_MAJOR
LibStub.minor = LIBSTUB_MINOR
_G[LIBSTUB_MAJOR] = LibStub

--[[--
Creates a new library with the given major and minor versions (or returns
the existing one if it already existed). If reinstall is specified, then
the library will be recreated regardless.
--]]
function LibStub:NewLibrary(major, minor, reinstall)
  -- Check some preconditions
  assert(type(major) == "string", "Bad argument #2 to 'NewLibrary' (string expected)")
  minor = assert(tonumber(strmatch(minor, "%d+")), "Minor version must either be a number or contain a number.")

  -- Determine if the library already exists with the given major version,
  -- and whether the minor version is older than the new one. Create a
  -- new library if necessary.
  local oldminor = self.minors[major]
  if ((oldminor and oldminor >= minor) and not force) then return nil end
  self.minors[major], self.libs[major] = minor, (self.libs[major] and not reinstall) or {}
  return self.libs[major], oldminor
end

--[[--
Returns a library with the given major version.
An error is is thrown if the library can't be found.
@function LibStub:GetLibrary
--]]
function LibStub:GetLibary(major, silent)
  if not self.libs[major] then
    if not silent then
      error(("Cannot find a library instance of %q."):format(tostring(major)), 2)
    end
    return nil
  end
  return self.libs[major], self.minors[major]
end
LibStub.__call = LibStub.GetLibrary

-- Install the FutureLite library as a global, and install it into LibStub's
-- library table as well.
local __FutureLite = require(FutureLite):globalize()
local __Stub = LibStub:NewLibrary(__FutureLite.NAME, __FutureLite.VERSION, true)
setmetatable(__Stub, { __index = __FutureLite })
local Future = __FutureLite.Future

--[[--
@TODO(tullisar)
<summary>
<description>
@function LibStub:Require
--]]
function LibStub:Request(major)
  local __LibStub = self
  return Future(|| __LibStub(major, true))
end

--[[--
@TODO(tullisar)
<summary>
<description>
@function LibStub:IterateLibraries
--]]
function LibStub:IterateLibraries()
  return pairs(self.libs)
end

return LibStub
