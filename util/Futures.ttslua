--[[--
Futures API
@module Futures
@author Rob Bartlett-Schneider / Tullisar
@revision 1.0
@license Apache2
@copyright 2021 Rob Bartlett-Schneider
--]]

--------------------------------------------------------------------------------
-- Dependencies
--------------------------------------------------------------------------------
local Tables    = require("tts-tullisar.util.Tables")
local Functions = require("tts-tullisar.util.Functions")
local Logger    = require("tts-tullisar.util.Logger")("Futures")
local Class     = require("tts-tullisar.util.Class")
Logger:setMinimumLevel(Logger.levels.TRACE)

-- Create a new table for the library.
local Futures =
{
  DEFAULT_TIMEOUT = 45,
}

-- =============================================================================
-- Local functions
-- These are not exposed to users of this module.
-- =============================================================================

--------------------------------------------------------------------------------
-- __fps
-- Used to get the current number of frames per second, based on a running
-- average, dropping outliers.
--------------------------------------------------------------------------------
local __fps
do

  local __average = Time.delta_time --
  local __sum     = __average
  local __count   = 1

  ------------------------------------------------------------------------------
  -- __update
  -- Updates the current average FPS counter.
  -- @TODO(tullisar): Better outlier tracking.
  ------------------------------------------------------------------------------
  local function __update()
    local __current = Time.delta_time
    if ((__current < (2.0 * __average)) and (__current >= (0.5 * __average))) then
      __sum     = __sum + __current
      __count   = __count + 1.0
      __average = (__sum / __count);
    end
  end

  ------------------------------------------------------------------------------
  -- __fps
  -- Returns the current average frames per second.
  ------------------------------------------------------------------------------
  function __fps()
    local fps = (1.0 / __average)
  end

end

--------------------------------------------------------------------------------
-- __doCallbacks
-- Helper to execute all callbacks in the given list, using the provided
-- function to supply the arguments to the callbacks.
--------------------------------------------------------------------------------
function __doCallbacks(list, result)
  Tables:forEachIndex(list, list.n, |_, callback| callback(result()))
end

local function __addToList(list, callback)
  assert(type(callback) == "function")
  list.n = list.n + 1
  list[list.n] = callback
end

local function __addCallbacks(list, ...)
  assert(type(list) == "table")
  table.forEachArgument(list, |callback| __addToList(list, callback)) --
end


--==============================================================================
-- Future API
--==============================================================================

--[[--
@TODO(tullisar)
@type Future
--]]
local Future
do

  -- Define the possible states a future can be in.
  local STATE = --
  {
    EXPIRED     = -3,
    CANCELLED   = -2,
    ERROR       = -1,
    NEW         = 0,
    READY       = 1,
    RUNNING     = 2,
    FINISHING   = 3,
    SUCCESS     = 4,
  }

  Future                = Class("tts-tullisar.Futures.Future")
  Future.STATE          = STATE
  Future.Static.Builder = Class("tts-tullisar.Futures.Future.Builder")
  local Builder         = Future.Static.Builder

  --[[--
  Constructs a new future.
  @function Future:new
  --]]
  function Future:new(future)
    future.__isDone  = false
    future.__state   = STATE.NEW
    future.__callbacks =
    {
      onTimeout = { n = 0 },
      onError   = { n = 0 },
      onSuccess = { n = 0 },
    }
    future.__result  = || error("Invalid future state.")
    future.__message = || error("Invalid future state.")
  end

  ------------------------------------------------------------------------------
  -- Future State Accessors
  ------------------------------------------------------------------------------
  Future.isFailed    = |f| (f.__state < STATE.NEW)
  Future.isCancelled = |f| (f.__state == STATE.CANCELLED)
  Future.isExpired   = |f| (f.__state == STATE.EXPIRED)
  Future.isError     = |f| (f.__state == STATE.ERROR)
  Future.isNew       = |f| (f.__state == STATE.NEW)
  Future.isReady     = |f| (f.__state == STATE.READY)
  Future.isRunning   = |f| (f.__state == STATE.RUNNING)
  Future.isSuccess   = |f| (f.__state == STATE.SUCCESS)
  Future.isDone      = |f| (f:isFailed() or f:isSuccess())

  ------------------------------------------------------------------------------
  -- Shared Functions
  ------------------------------------------------------------------------------

  --[[--
  Registers a callback to run when the future expires while waiting for its
  result. If this future is already complete and is expired, then the
  callback(s) will run immediately.
  @function Future:onTimeout
  --]]
  function Future:onTimeout(...)
    if (not self:isDone()) then
      __addCallbacks(self.__callbacks.onTimeout, ...)
    elseif (self:isExpired()) then
      __doCallbacks(table.pack(...), || self:__message())
    end
    return self
  end
  Builder.onTimeout = (|b,...| b.__data:onTimeout(...) and b)

  --[[--
  Adds a timeout to this future of the given duration.
  @function Future:withTimeout
  --]]
  function Future:withTimeout(duration)
    if not self.__isDone then
      self.__timeout = ((type(duration) == "number") and (duration > 0) and duration) or error("Timeout value must be a number")
    end
    return self
  end
  Builder.withTimeout = (|b,d| b.__data:withTimeout(d) and b)

  --[[--
  Registers one or more callbacks to run when the future encounters an error
  while attempting to retrieve the result. If this future is already complete
  and has failed with an error, then the callback(s) will run immediately.    --
  @function Future:onError                                                    --
  --]]
  function Future:onError(...)
    if (not self:isDone()) then
      __addCallbacks(self.__callbacks.onError, ...)
    elseif (self:isError()) then
      __doCallbacks(table.pack(...), || self:__message())
    end
    return self
  end
  Builder.onError = (|b,...| b.__data:onError(...) and b)

  --[[--
  Registers one or more callbacks to run when this future has completed
  succesfully. If this future has already successfully completed, then the
  callback(s) will be run immediately.
  @function Future:onSucces
  --]]
  function Future:onSuccess(...)
    if (not self:isDone()) then
      Logger:trace("[Future] Not complete. Adding callbacks...")
      __addCallbacks(self.__callbacks.onSuccess, ...)
    elseif (self:isSuccess()) then
      Logger:trace("[Future] Already complete. Executing callbacks...")
      __doCallbacks(table.pack(...), || self:__result())
    end
    return self
  end
  Builder.onSucces = |b,...| (b.__data:onSuccess(...) and b)

  ------------------------------------------------------------------------------
  -- Builder Functions
  ------------------------------------------------------------------------------

  --[[--
  Returns a new future builder instance.
  @function Builder:new()
  --]]
  function Builder:new(builder)
    builder.__data = Future()
  end
  Future.Static.builder = |_, action| Builder(action)

  --[[--
  Builds and returns a new future using the details defined in this builder.
  @function Builder:build
  --]]
  function Builder:build(result, message)

    local data = self.__data
    local future = Future()
    future.__result    = Functions:assertIsCallable(result, "Invalid result supplier.")
    future.__message   = Functions:assertIsCallable(message, "Invalid message supplier.")
    future.__isDone    = false
    future.__timeout   = data.__timeout
    future.__state     = STATE.READY
    future.__callbacks =
    {
        onTimeout = Tables:copy(data.__callbacks.onTimeout), --
        onError   = Tables:copy(data.__callbacks.onError),
        onSuccess = Tables:copy(data.__callbacks.onSuccess),
    }

    return future

  end

  ------------------------------------------------------------------------------
  -- Future Functions
  ------------------------------------------------------------------------------

  --[[--
  Attempts to cancel this future, and prevent it from running if possible.
  @function Future:cancel
  --]]
  function Future:cancel(cancelRunning)
    if ((self:isRunning() and cancelIfRunning) or (self:isReady())) then
      self.__isDone = true
      self.__state  = STATE.CANCELLED
    end
    return (self.__state == STATE.CANCELLED)
  end

  --[[--
  Gets the result of this future, or throws the error that was encountered while
  attempting to compute the result.
  @function Future:get
  --]]
  function Future:get()
    assert(self:isDone(), "Result is not yet available.")
    if (self:isSuccess()) then
      return self:__result()
    elseif (self:isFailed()) then
      error(self:__message())
    end
  end

end

--[[--
Represents a runnable task managed by a scheduler, with a pending result.
@type Task
--]]
local Task
do
  Task = Class("Futures.Task") --

  --[[--
  Constructs a new task with the given action to run when the task is executed.
  @function Task:new
  --]]
  function Task:new(task, action)
    task.__action = assert(Functions:isCallable(action) and action)
    local builder = Future:builder(action)
    task.__future = builder:build(|| task:result(), || task:message())
    task.__created = Time.time
    task.__future.cancel = |_, c| task:cancel(c)
    task.__results = {}
  end

  --[[--
  Cancels this task if possible.
  @function Task:cancel
  --]]
  function Task.cancel(task, cancelIfRunning)
    local cancelled = Future.cancel(task.__future, cancelIfRunning)
    if (cancelled) then self.__results.message = "Future was cancelled." end
  end

  --[[--
  Handles an error thrown while executing this tasks's action.
  @function Task:onError
  --]]
  function Task.onError(task, message)
    local message = string:format("[Task] Execution failed: \n%s", logString(message))
    Logger:error(message)
    local future = task.__future
    if (not future:isDone()) then
      future.__isDone = true
      future.__state = Future.STATE.ERROR
      __doCallbacks(future.__callbacks.onError, || task:message())
    end
    return message
  end

  --[[--
  Proceses a timeout
  @function Task:onTimeout
  --]]
  function Task.onTimeout(task)
    Logger:trace("[Task] Timeout monitor triggered.")
    if (not task:isDone()) then
      local future = task.__future
      future.__isDone = true
      future.__state = Future.STATE.EXPIRED
      task.__results.message = "Timed out while waiting for the result."
      Logger:trace("[Task] Timed out.")
      if (not Wait.stop(task.__id)) then
        Logger:trace("[Task] Action: not stopped.")
      else
        Logger:trace("[Task] Action: stopped.")
      end
      __doCallbacks(future.__callbacks.onTimeout, || task:message())
    end
  end

  --[[--
  Determines if this task is done.
  @function Task:isDone
  --]]
  function Task.isDone(task)
    return task.__future:isDone()
  end

  --[[--
  Checks that this task is complete, or throws an error.
  @function Task:assertIsDone
  --]]
  function Task.assertIsDone(task)
    assert(task:isDone(), "Invalid task state, task is not done.")
  end

  --[[--
  Checks that this task is complete, or throws an error.
  @function Task:assertIsDone
  --]]
  function Task.assertNotStarted(task)
    assert(task.__future:isReady(), "Invalid task state, not in ready state.")
  end

  --[[--
  Returns the error message associated with this tasks's action, if any.
  @function Task:message
  --]]
  function Task.message(task)
    return task.__results.message
  end

  --[[--
  Returns the result of this task, or throws an error if the task is failed.
  @function Task:result
  --]]
  function Task.result(task)
    task:assertIsDone()
    assert(task.__future:isSuccess(), "Invalid task state, action was not successful.")
    Logger:trace("[Task] result()")
    local results = task.__results
    local count = results.count
    local value = results.value
    return ((count == 1) and value) or
           ((count > 1) and table.unpack(value, 2, (count + 1))) or nil
  end

  --[[--
  Determines whether this task is expired or not.
  @function Task:isExpired
  --]]
  function Task.isExpired(task)
    local future = task.__future
    local timeout = (((type(future.__timeout) == "number") and future.__timeout) or nil)
    if (not future:isDone() and timeout) then
      local expired = ((Time.time - task.__submitted) > timeout)
      if (expired) then Logger:trace("[Task] Task has expired.") end
      return expired
    end
    return future:isExpired()
  end

  --[[--
  Starts a monitor for this tasks's comletion
  @function Task:monitorTimeout
  --]]
  function Task.monitorTimeout(task)
    assert((task.__id ~= nil), "Invalid task state.")
    task.__monitor = Wait.condition(|| task:onTimeout(), || (task:isDone() or task:isExpired()))
  end

  --[[--
  Runs this task's action and updates the future when the result is available.
  @function Task:run
  --]]
  function Task.run(task)

    -- Run the action in a protected call.
    task:assertNotStarted()
    Logger:trace("[Task] Started.")
    local future = task.__future
    future.__state = Future.STATE.RUNNING
    local results = table.pack(xpcall(|| task.__action(), |e| task:onError(e)))
    future.__state = Future.STATE.FINISHING
    future.__isDone = true

    -- Ensure the future is in a valid state after running. If failed, then
    -- state will already have been set by handlers, return early.
    if (future:isFailed()) then return end
    assert(results[1], "Invalid task state, action error not handled:\n" .. tostring(results[2]))

    -- Update state with results and notify callbacks.
    Logger:trace("[Task] Success.")
    future.__state    = Future.STATE.SUCCESS
    if (task.__monitor) then Wait.stop(task.__monitor) end
    local r = task.__results
    r.count = (results.n - 1)
    r.value = (((r.count > 1) and results) or results[2])
    __doCallbacks(future.__callbacks.onSuccess, || task:result())


  end

end

-- =============================================================================
-- Schedulers API
-- =============================================================================
local Schedulers
do

  --[[--
  A factory of various scheduler implementations.
  @type Scheduler
  --]]
  Schedulers = Class("Futures.Scheduler", true)
  Futures.Schedulers = Schedulers

  --[[--
  Submit the given action to run later, and return a future representing the
  result of the action.
  @function Schedulers:submit
  --]]
  function Schedulers:submit(action)
    local task = Task(action)
    task.__submitted = Time.time
    task.__id = Wait.frames(|| task:run(), 1)
    task:monitorTimeout()
    return task.__future
  end

end

return Futures
